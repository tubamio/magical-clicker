name: Apply Patch (manual)

on:
  workflow_dispatch:
    inputs:
      title:
        description: "PR title"
        required: true
        default: "Auto patch"
      patch:
        description: "Paste unified diff (git diff/patch). Use a fenced code block when copying."
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show default branch
        run: echo "DEFAULT_BRANCH=${{ github.event.repository.default_branch }}"

      - name: Write patch file
        shell: bash
        run: |
          cat > patch.diff <<'PATCH_END'
          ${{ inputs.patch }}
          PATCH_END
          echo "---- PATCH HEAD ----"
          sed -n '1,80p' patch.diff || true
          echo "----  PATCH END  ----"
          # 余計な CRLF を排除（コピペ時の改行差異対策）
          sed -i 's/\r$//' patch.diff

      - name: Try apply with multiple strategies (no fail-fast)
        shell: bash
        run: |
          set -x
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          ok=""
          echo "## Try git apply -p0 --3way"
          if git apply --check -p0 --3way patch.diff 2>err.txt; then
            git apply -p0 --3way patch.diff && ok="p0"
          else
            echo "::warning ::-p0 failed: $(tr '\n' ' ' < err.txt)"
          fi

          if [ -z "$ok" ]; then
            echo "## Try git apply -p1 --3way"
            if git apply --check -p1 --3way patch.diff 2>err.txt; then
              git apply -p1 --3way patch.diff && ok="p1"
            else
              echo "::warning ::-p1 failed: $(tr '\n' ' ' < err.txt)"
            fi
          fi

          # メール形式のパッチにも対応（git format-patch 等）
          if [ -z "$ok" ]; then
            if grep -qi '^From [0-9a-f]\{7,\} ' patch.diff; then
              echo "## Try git am"
              if git am --keep-cr < patch.diff 2>err.txt; then
                ok="am"
              else
                echo "::warning ::git am failed: $(tr '\n' ' ' < err.txt)"
                git am --abort || true
              fi
            fi
          fi

          # それでもダメなら GNU patch で挑戦
          if [ -z "$ok" ]; then
            echo "## Try GNU patch -p0"
            if patch -p0 -s -N < patch.diff 2>err.txt; then
              ok="patch-p0"
            else
              echo "::warning ::patch -p0 failed: $(tr '\n' ' ' < err.txt)"
            fi
          fi

          if [ -z "$ok" ]; then
            echo "## Try GNU patch -p1"
            if patch -p1 -s -N < patch.diff 2>err.txt; then
              ok="patch-p1"
            else
              echo "::warning ::patch -p1 failed: $(tr '\n' ' ' < err.txt)"
            fi
          fi

          if [ -z "$ok" ]; then
            echo "::error ::All apply strategies failed. See warnings above."
            exit 128
          fi

          echo "APPLIED_WITH=$ok" | tee -a $GITHUB_ENV

      - name: Create branch, commit, push
        if: env.APPLIED_WITH != ''
        shell: bash
        run: |
          set -e
          BR="auto/patch-${{ github.run_id }}-$(date +%s)"
          echo "BR=$BR" | tee -a $GITHUB_ENV
          git checkout -b "$BR"
          git add -A
          git status
          git commit -m "${{ inputs.title }}"
          git push -u origin "$BR"

      - name: Create Pull Request
        if: env.BR != ''
        uses: peter-evans/create-pull-request@v6
        with:
          title: ${{ inputs.title }}
          body: |
            Applied via workflow_dispatch by ${{ github.actor }}.
            Base: `${{ github.event.repository.default_branch }}` / Head: `${{ env.BR }}`
            Strategy: `${{ env.APPLIED_WITH }}`
          branch: ${{ env.BR }}
          base: ${{ github.event.repository.default_branch }}
